---
layout: post
title:  "The molecular QSAR descriptors in the CDK"
date:   2007-12-20
blogger-link: https://chem-bla-ics.blogspot.com/2007/12/molecular-qsar-descriptors-in-cdk.html
doi: 10.59350/47rre-wwc20
tags: cdk qsar bioclipse doi:10.2174/138161206777585274
---

Pending the release of [Bioclipse 1.2.0](http://www.bioclipse.net/), Ola asked me to do some additional feature
implementation for the QSAR feature, such as having the filenames as labels in the descriptor matrix. See also
these earlier items:

* [More QSAR in Bioclipse: the JOELib extension](http://chem-bla-ics.blogspot.com/2007/10/more-qsar-in-bioclipse-joelib-extension.html)
* [Further Bioclipse QSAR functionality development](http://chem-bla-ics.blogspot.com/2007/07/further-bioclipse-qsar-functionality.html)
* [QSAR plugin for Bioclipse getting in shape](http://chem-bla-ics.blogspot.com/2007/06/qsar-plugin-for-bioclipse-getting-in.html)
* [Bioclipse now allows QSAR descriptor selection](http://chem-bla-ics.blogspot.com/2007/04/bioclipse-now-allows-qsar-descriptor.html)
* [Bioclipse Workshop: short but productive](http://chem-bla-ics.blogspot.com/2006/11/bioclipse-workshop-short-but.html)

(How more open notebook science can you get?)

But I ran into some trouble when both [JOElib](http://joelib.sf.net/) and [CDK](http://cdk.sf.net/) descriptors
were selected, or Ola really. Now, nothing much I plan to do on the JOElib code, but at least I code investigate
the CDK code.

The QSAR descriptor framework has been published in the *Recent developments of the chemistry development kit (CDK) -
an open-source java library for chemo- and bioinformatics* paper (DOI:[10.2174/138161206777585274](https://doi.org/10.2174/138161206777585274)).
However, while most molecular descriptors had JUnit tests for at least the `calculate()` method, a full
and proper module testing was not set up. This involves a rough coverage testing and test methods for all
methods in the classes.

So, I set up a new CDK module called `qsarmolecular`, and added the coverage test class
[QsarmolecularCoverageTest](http://cdk.svn.sourceforge.net/viewvc/cdk/trunk/cdk/src/org/openscience/cdk/test/QsarmolecularCoverageTest.java?revision=9638&view=markup).
This class is really short and basically only requires a module to be set up, as reflected by the line:

```java
private final static String CLASS_LIST = "qsarmolecular.javafiles";
```

The actual functionality is inherited from the [CoverageTest](http://cdk.svn.sourceforge.net/viewvc/cdk/trunk/cdk/src/org/openscience/cdk/test/CoverageTest.java?revision=9638&view=markup).
The coverage testing requires, unlike tools like [Emma](http://chem-bla-ics.blogspot.com/2006/11/code-coverage-making-sure-your-code-is.html)
for which [reports are generated by Nightly](http://cheminfo.informatics.indiana.edu/~rguha/code/java/nightly/),
a certain naming scheme (explained in *Development Tools. 1. Unit testing* in
[CDK News](http://www.cdknews.org/) 2.2).

Now, testing for a lot of the methods in the [IMolecularDescriptor](http://cdk.svn.sourceforge.net/viewvc/cdk/trunk/cdk/src/org/openscience/cdk/qsar/IMolecularDescriptor.java?revision=9170&view=markup)
and [IDescriptor](http://cdk.svn.sourceforge.net/viewvc/cdk/trunk/cdk/src/org/openscience/cdk/qsar/IDescriptor.java?revision=9170&view=markup)
interfaces are actually identical for all descriptors. Therefore, I wrote a
[MolecularDescriptorTest](http://cdk.svn.sourceforge.net/viewvc/cdk/trunk/cdk/src/org/openscience/cdk/test/qsar/descriptors/molecular/MolecularDescriptorTest.java?revision=9653&view=markup)
and made all JUnit test classes for the molecular descriptors extend this new class. This means that by writing only 10 new tests,
with 29 assert statements, for the 45 molecular descriptor classes, 450 new unit tests are run without special effort, making to
total sum of unit tests run each night by Nightly for [trunk/](http://cdk.svn.sourceforge.net/viewvc/cdk/trunk/)
pass the 4500 unit tests.

Now, this turned out to be necessary. I count 52 new failing tests, which should hit Nightly in the next 24 hours.
